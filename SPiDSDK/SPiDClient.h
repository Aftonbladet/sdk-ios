//
//  SPiDClient.h
//  SPiDSDK
//
//  Created by Mikael Lindström on 9/11/12.
//  Copyright (c) 2012 Mikael Lindström. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "SPiDConstants.h"
#import "SPiDUtils.h"

@class SPiDAuthorizationRequest;
@class SPiDResponse;
@class SPiDAccessToken;

/**
 * Class description.....
 *
 **/

#ifdef DEBUG
#   define SPiDDebugLog(fmt, ...) NSLog((@"%s [Line %d] " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
#else
#   define SPiDDebugLog(...)
#endif

@interface SPiDClient : NSObject

///---------------------------------------------------------------------------------------
/// @name Client properties
///---------------------------------------------------------------------------------------

/** Client ID provided by SPiD  */
@property(strong, nonatomic) NSString *clientID;

/** Client secret provided by SPiD  */
@property(strong, nonatomic) NSString *clientSecret;

/** App URL schema

 This is used for generating the redirect URI needed for switching back from safari to app
 */
@property(strong, nonatomic) NSString *appURLScheme;

/** Redirect URI

 This is normally generated by the SDK using the `appURLSchema`://SPiD
 */
@property(strong, nonatomic) NSURL *redirectURI; // TODO: Default to appURLScheme://SPiD/{login|logout|failure}

/** URL to the SPiD server */
@property(strong, nonatomic) NSURL *serverURL;

/** URL to use for authorization to SPiD

 This URL is normally generated using the `serverURL´/auth/login
 */
@property(strong, nonatomic) NSURL *authorizationURL;

/** URL to use for requesting access token from SPiD

 This URL is normally generated using the `serverURL´/oauth/token
 */
@property(strong, nonatomic) NSURL *tokenURL;

/** Sets if access token should be saved in keychain, default value is YES */
@property(nonatomic) BOOL saveToKeychain;

///---------------------------------------------------------------------------------------
/// @name Public Methods
///---------------------------------------------------------------------------------------

/** Returns the singleton instance of SPiDClient

 @return Returns singleton instance
 */
+ (SPiDClient *)sharedInstance;

/** Configures the `SPiDClient`

 @param clientID The client ID provided by SPiD
 @param clientSecret The client secret provided by SPiD
 @param appURLSchema The url schema for the app (eg spidtest://)
 @param serverURL The url to SPiD
 */
- (void)setClientID:(NSString *)clientID
    andClientSecret:(NSString *)clientSecret
    andAppURLScheme:(NSString *)appURLSchema
         andSPiDURL:(NSURL *)serverURL;

/** Handles URL redirects to the app

 @param url Input URL
 @return Returns YES if URL was handled by `SPiDClient`
 */
- (BOOL)handleOpenURL:(NSURL *)url;

/** Authorizes with SPiD

 This requires that the `SPiDClient` has been configured.
 Redirects to safari to get code and then uses this to obtain a access token.
 The access token is then saved to keychain

 @warning `SPiDClient` has to be configured before calling `authorizationRequestWithCompletionHandler`
 @param completionHandler Run after authorization is completed
 */
- (void)authorizationRequestWithCompletionHandler:(void (^)(NSError *response))completionHandler;

/** Logout from SPiD

 This requires that the app has obtained a access token.
 Redirects to safari to logout from SPiD and remove cookie.
 Also removes access token from keychain

 @warning `SPiDClient` has to be logged in before this call
 @param completionHandler Run after logout is completed
 @see authorizationRequestWithCompletionHandler:
 @see isLoggedIn
 */
- (void)logoutRequestWithCompletionHandler:(void (^)(NSError *response))completionHandler;

/** Refresh access token

 Forces refresh of access token, this is unusally not needed since SPiDSDK will automatically refresh token when needed.
 The access token is then saved to keychain

 @warning `SPiDClient` has to be logged in before this call
 @param completionHandler Run after authorization is completed
 @see authorizationRequestWithCompletionHandler:
 @see isLoggedIn
 */
- (void)refreshAccessTokenRequestWithCompletionHandler:(void (^)(NSError *response))completionHandler;

/** Requests the currently logged in user’s object. Note that the user session does not last as long as the access token, therefor the me request should only be used right after the app has received a access token. The user id should then be saved and used with the `getUserRequestWithID:andCompletionHandler`

 For information about the return object see: <http://www.schibstedpayment.no/docs/doku.php?id=wiki:user_api>

 @error user not logged in
 @warning Requires that the user is authorized with SPiD
 @param completionHandler Run after request is completed
 @see authorizationRequestWithCompletionHandler:
 @see isLoggedIn
 */
- (void)meRequestWithCompletionHandler:(void (^)(SPiDResponse *response))completionHandler;

/** Requests the userinformation for the specified userID

 For information about the return object see: <http://www.schibstedpayment.no/docs/doku.php?id=wiki:user_api>

 @warning Requires that the user is authorized with SPiD
 @param userID ID for the selected user
 @param completionHandler Run after request is completed
 @see authorizationRequestWithCompletionHandler:
 @see isLoggedIn
 */
- (void)getUserRequestWithID:(NSString *)userID andCompletionHandler:(void (^)(SPiDResponse *response))completionHandler;

/** Request all login attempts for a specific client

 For information about the return object see: <http://www.schibstedpayment.no/docs/doku.php?id=wiki:login_api>

 @warning Requires that the user is authorized with SPiD
 @param userID The userID that logins should be fetched for
 @param completionHandler Run after request is completed
 @see authorizationRequestWithCompletionHandler:
 @see isLoggedIn
 */
- (void)loginsRequestWithUserID:(NSString *)userID andCompletionHandler:(void (^)(SPiDResponse *response))completionHandler;

/** Checks if the access token has expired

 @return Returns YES if access token has expired
 */
- (BOOL)hasTokenExpired;

/** Returns the time when access token expires

 @return Returns the date when the access token expires
 */
- (NSDate *)tokenExpiresAt;

/** Returns YES if `SPiDClient` has a access token and is logged in

 @return Returns YES if `SPiDClient` is logged in
 */
- (BOOL)isLoggedIn;

- (void)getUserRequestWithCurrentUserAndCompletionHandler:(void (^)(SPiDResponse *))completionHandler;
@end
